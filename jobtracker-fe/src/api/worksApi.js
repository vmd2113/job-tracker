import axiosInstance from "./axiosConfig.js";

const WORKS_API = '/wfm/works';

const getAllWorks = async () => {
    try {
        const response = await axiosInstance.get(`${WORKS_API}/`);
        return response.data;
    } catch (error) {
        throw error;
    }
};

const getWorkByWorkId = async (workId) => {
    try {
        const response = await axiosInstance.get(`${WORKS_API}/${workId}`);
        return response.data;
    } catch (error) {
        throw error;
    }
};


const formatDateForAPI = (dateValue) => {
    if (!dateValue) return null;

    // If already a string in ISO format, return it
    if (typeof dateValue === 'string') {
        return dateValue;
    }

    // Convert Date object to ISO string
    if (dateValue instanceof Date) {
        return dateValue.toISOString();
    }

    return null;
};

const createWork = async (workData) => {
    try {
        // Format dates properly for the API
        const formattedData = {
            workContent: workData.workContent,
            workTypeId: workData.workTypeId,
            priorityId: workData.priorityId,
            startTime: formatDateForAPI(workData.startTime),
            assignedUserId: workData.assignedUserId
            // Note: workCode and endTime are generated by backend
            // status is set to 1 by default in backend
        };

        console.log("Sending work creation data:", formattedData);

        const response = await axiosInstance.post(`${WORKS_API}/`, formattedData);
        return response.data;
    } catch (error) {
        console.error("ERROR AT CREATE WORK", error);
        throw error;
    }
};

const updateWork = async (workId, workData) => {
    try {
        const formattedData = {
            workContent: workData.workContent,
            workTypeId: workData.workTypeId,
            priorityId: workData.priorityId,
            startTime: formatDateForAPI(workData.startTime),
            endTime: formatDateForAPI(workData.endTime),
            assignedUserId: workData.assignedUserId,
            status: workData.status,
            finishTime: formatDateForAPI(workData.finishTime)
        };

        console.log("Sending work update data:", formattedData);

        const response = await axiosInstance.put(`${WORKS_API}/${workId}`, formattedData);
        return response.data;
    } catch (error) {
        console.error("ERROR AT UPDATE WORK", error);
        throw error;
    }
};

const searchWorks = async ({
                               page = 0,
                               size = 10,
                               workCode = '',
                               workContent = '',
                               workTypeId = '',
                               priorityId = '',
                               status = '',
                               startTime = '',
                               endTime = '',
                               assignedUserId = '',
                               sortBy = 'updateDate',
                               sortDirection = 'desc'
                           }) => {
    try {
        const params = {
            page: String(page),
            size: String(size),
            ...(workCode && { workCode }),
            ...(workContent && { workContent }),
            ...(workTypeId && { workTypeId }),
            ...(priorityId && { priorityId }),
            ...(status && { status }),
            ...(startTime && { startTime: formatDateForAPI(startTime) }),
            ...(endTime && { endTime: formatDateForAPI(endTime) }),
            ...(assignedUserId && { assignedUserId }),
            sortBy: sortBy || 'updateDate',
            sortDirection: sortDirection || 'desc'
        };

        console.log("PARAMS SEARCH WORKS: ", params);

        const response = await axiosInstance.get(`${WORKS_API}/search`, { params });
        console.log("RESPONSE SEARCH WORKS: ", response);
        return response.data;
    } catch (error) {
        console.error("ERROR AT SEARCH WORKS", error);
        throw error;
    }
};

const deleteWork = async (workId) => {
    try {
        const response = await axiosInstance.delete(`${WORKS_API}/${workId}`);
        return response.data;
    } catch (error) {
        console.error("ERROR AT DELETE WORK", error);
        throw error;
    }
};

const deleteListWorks = async (workIds) => {
    try {
        const response = await axiosInstance.delete(`${WORKS_API}/delete/list`, {
            data: workIds
        });
        return response.data;
    } catch (error) {
        console.error("ERROR AT DELETE LIST WORKS", error);
        throw error;
    }
};

export {
    getAllWorks,
    getWorkByWorkId,
    searchWorks,
    createWork,
    updateWork,
    deleteWork,
    deleteListWorks
};